# TODO: Change the name of the org
org: okmarq
app: serverless-todo-app
service: serverless-todo-app
configValidationMode: error

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  # lambdaHashingVersion: '20201221'
  apiGateway:
    minimumCompressionSize: 1024

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example,
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-todo-images-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGE_ID_INDEX: ImageIdIndex
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: "*"
        # - Effect: Allow
        #   Action:
        #     - secretmanager:GetSecretValue
        #   Resource: !Ref Auth0Secret
        # - Effect: Allow
        #   Action:
        #     - kms:Decrypt
        #   Resource: !GetAtt KMSKey.Arn

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for Todo app
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function -
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  # GetTodos:
  #   handler: src/lambda/http/getTodos.handler
  #   events:
  #     - http:
  #         method: get
  #         path: todos
  #         cors: true
  #         authorizer: Auth
  #         reqValidatorName: RequestBodyValidator
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:Query
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  #     - Effect: "Allow"
  #       Action:
  #         - "xray:PutTraceSegments"
  #         - "xray:PutTelemetryRecords"
  #       Resource:
  #         - "*"

  # TODO: Configure this function -
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  # GetTodo:
  #   handler: src/lambda/http/getTodo.handler
  #   events:
  #     - http:
  #         method: get
  #         path: todo
  #         cors: true
  #         authorizer: Auth
  #         reqValidatorName: RequestBodyValidator
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:Query
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  #     - Effect: "Allow"
  #       Action:
  #         - "xray:PutTraceSegments"
  #         - "xray:PutTelemetryRecords"
  #       Resource:
  #         - "*"

  # TODO: Configure this function -
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource.
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below.
  # CreateTodo:
  #   handler: src/lambda/http/createTodo.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos
  #         cors: true
  #         authorizer: Auth
  #         reqValidatorName: RequestBodyValidator
  #         request:
  #           schemas:
  #             application/json: ${file(models/create-todo-model.json)}
  #   iamRoleStatementsInherit: true
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:GetItem
  #         - dynamodb:UpdateItem
  #         - dynamodb:PutItem
  #       # Resource: arn:aws:dynamodb:<TABLE-NAME>
  #       # Resource: !GetAtt TodosTable.Arn
  #       Resource:
  #         - "*"

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  # UpdateTodo:
  #   handler: src/lambda/http/updateTodo.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: todos/{todoId}
  #         cors: true
  #         authorizer: Auth
  #         reqValidatorName: RequestBodyValidator
  #         request:
  #           schemas:
  #             application/json: ${file(models/update-todo-model.json)}
  #   iamRoleStatementsInherit: true
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:GetItem
  #         - dynamodb:UpdateItem
  #         - dynamodb:PutItem
  #       # Resource: arn:aws:dynamodb:<TABLE-NAME>
  #       # Resource: !GetAtt TodosTable.Arn
  #       Resource:
  #         - "*"

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}
  #         cors: true
  #         authorizer: Auth
  #         reqValidatorName: RequestBodyValidator
  #   iamRoleStatementsInherit: true
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:GetItem
  #         - dynamodb:UpdateItem
  #         - dynamodb:PutItem
  #       # Resource: arn:aws:dynamodb:<TABLE-NAME>
  #       # Resource: !GetAtt TodosTable.Arn
  #       Resource:
  #         - "*"

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        # Resource: arn:aws:dynamodb:<TABLE-NAME>
        # Resource: !GetAtt TodosTable.Arn
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like.
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
        # StatusCode: !Ref statusCode

    # TODO: Create a DynamoDB table with local secondary index and a composite key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # TODO: Complete the bucket properties below.
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        # NotificationConfiguration:
        #   TopicConfigurations:
        #     - Event: s3:ObjectCreated:Put
        #       Topic: !Ref ImagesTopic
        # AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              ExposedHeaders:
                - Date
              Id: myCORSRuleId1
              MaxAge: 3600
            - AllowedHeaders:
                - x-amz-*
              AllowedMethods:
                - DELETE
              AllowedOrigins:
                - "*"
              ExposedHeaders:
                - Connection
                - Server
                - Date
              Id: myCORSRuleId2
              MaxAge: 1800
  # Outputs:
  #   BucketName:
  #     Value: !Ref S3Bucket
  #     Description: Name of the sample Amazon S3 bucket with CORS enabled.

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref AttachmentsBucket
                  - /*
              Principal: "*"

    # KMSKey:
    #   Type: AWS::KMS::Key
    #   Properties:
    #     Description: KMS Key to encrypt Auth0 secret
    #     KeyPolicy:
    #       Version: "2012-10-17"
    #       Id: key-default-1
    #       Statement:
    #         - Sid: Allow administration of the key
    #           Effect: Allow
    #           Principal:
    #             AWS:
    #               Fn::Join:
    #               - ":"
    #               - - "arn:aws:iam"
    #                 - Ref: AWS::AccountId
    #                 - "root"
    #           Action:
    #             - "kms:*"
    #           Resource: "*"

    # KMSKeyAlias:
    #   Type: AWS::KMS::Alias
    #   Properties:
    #     Description: alias/auth0key-$(self:provider.stage)
    #     TargetKeyId: !Ref KMSKey

    # Auth0Secret:
    #   Type: AWS::SecretManager::Secret
    #   Properties:
    #     Name: $(self:provider.environment.AUTH_0_SECRET_ID)
    #     Description: Auth0 secret
    #     KMSKeyId: !Ref KMSKey
